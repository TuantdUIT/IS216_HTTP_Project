/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelmanagement.dashboard_main;
// TranDuongTuan_27052025_Change_5:32
import hotelmanagement.add.AddInvoiceForm;
import hotelmanagement.add.AddRoomForm;
import hotelmanagement.add.AddServiceForm;
import hotelmanagement.entity.Current_User;
import hotelmanagement.entity.Invoice;
import hotelmanagement.entity.Room;
import hotelmanagement.entity.Service;
import hotelmanagement.entity.Customer;
import hotelmanagement.entity.Payout;
import hotelmanagement.entity.Service_payout;
import hotelmanagement.entity.dba_connection;
import hotelmanagement.update.UpdateInvoiceForm;
import hotelmanagement.update.UpdateRoomForm;
import hotelmanagement.update.UpdateServiceForm;
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;


public class DashboardStaff extends javax.swing.JFrame {
//Khai báo các biến   
    int flag_checkout = 0;
    public DefaultTableModel model = new DefaultTableModel();
    public ArrayList<Payout> list_Payout = new ArrayList<>();
    public ArrayList<Service_payout> ser_list = new ArrayList<>();
    public ArrayList<Invoice> invoices = new ArrayList<>();
    public ArrayList<Customer> customers = new ArrayList<>();
    public ArrayList<Service> services = new ArrayList<>();
    public ArrayList<Room> rooms = new ArrayList<>();
    public DashboardStaff() {       
        initComponents();      
        setLocationRelativeTo(null);
        autoReloadRoom();
        autoReloadService();
        autoReloadInvoice();
        autoReloadCustomer();
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        panelBtn = new javax.swing.JPanel();
        btnRoomManagement = new javax.swing.JButton();
        btnServiceManagement = new javax.swing.JButton();
        btnInvoiceManagement = new javax.swing.JButton();
        btnCustomerManagement = new javax.swing.JButton();
        btnPayCheckout = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        CardLayout_Management = new javax.swing.JPanel();
        CardPayCheckout = new javax.swing.JPanel();
        btnPay = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        pay_table = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Sdt_txt = new javax.swing.JTextField();
        btnSearch_SDT = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        Rooms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        LbRoomManage = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        roomBtnPanel = new javax.swing.JPanel();
        btnAddRoom = new javax.swing.JButton();
        btnDeleteRoom = new javax.swing.JButton();
        btnUpdateRoom = new javax.swing.JButton();
        Services = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblServices = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        LbRoomManage1 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        serviceBtnPanel = new javax.swing.JPanel();
        btnAddService = new javax.swing.JButton();
        btnDeleteService = new javax.swing.JButton();
        btnUpdateService = new javax.swing.JButton();
        Invoices = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        LbRoomManage2 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        invoiceBtnPanel = new javax.swing.JPanel();
        btnAddInvoice = new javax.swing.JButton();
        btnDeleteInvoice = new javax.swing.JButton();
        btnUpdateInvoice = new javax.swing.JButton();
        Customers = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        jSeparator7 = new javax.swing.JSeparator();
        btnSearchCustomer = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        sdt_txt_search = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jSplitPane1.setDividerSize(1);

        jPanel1.setBackground(new java.awt.Color(46, 121, 130));

        panelBtn.setBackground(new java.awt.Color(46, 121, 130));
        panelBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        btnRoomManagement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRoomManagement.setText("Rooms");
        btnRoomManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoomManagementActionPerformed(evt);
            }
        });

        btnServiceManagement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnServiceManagement.setText("Services");
        btnServiceManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServiceManagementActionPerformed(evt);
            }
        });

        btnInvoiceManagement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnInvoiceManagement.setText("Invoices");
        btnInvoiceManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvoiceManagementActionPerformed(evt);
            }
        });

        btnCustomerManagement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCustomerManagement.setText("Customers");
        btnCustomerManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerManagementActionPerformed(evt);
            }
        });

        btnPayCheckout.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnPayCheckout.setText("Pay & Checkout");
        btnPayCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBtnLayout = new javax.swing.GroupLayout(panelBtn);
        panelBtn.setLayout(panelBtnLayout);
        panelBtnLayout.setHorizontalGroup(
            panelBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBtnLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(panelBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRoomManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnServiceManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInvoiceManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCustomerManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPayCheckout))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        panelBtnLayout.setVerticalGroup(
            panelBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBtnLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btnRoomManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnServiceManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnInvoiceManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCustomerManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPayCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/manager_icon.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("MANAGEMENT");

        btnExit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 51, 51));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(panelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addComponent(panelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        CardLayout_Management.setLayout(new java.awt.CardLayout());

        CardPayCheckout.setBackground(new java.awt.Color(255, 255, 255));

        btnPay.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPay.setText("Pay and checkout");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        pay_table.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        pay_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Invoice", "Room", "DescribeRoom", "ServiceName", "Start Date", "End Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(pay_table);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setText("PAY & CHECKOUT");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("Phone Number:");

        Sdt_txt.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        btnSearch_SDT.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSearch_SDT.setText("Search");
        btnSearch_SDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch_SDTActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("Rooms in Use:");

        javax.swing.GroupLayout CardPayCheckoutLayout = new javax.swing.GroupLayout(CardPayCheckout);
        CardPayCheckout.setLayout(CardPayCheckoutLayout);
        CardPayCheckoutLayout.setHorizontalGroup(
            CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardPayCheckoutLayout.createSequentialGroup()
                .addGroup(CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CardPayCheckoutLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(CardPayCheckoutLayout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(CardPayCheckoutLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Sdt_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch_SDT, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CardPayCheckoutLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CardPayCheckoutLayout.createSequentialGroup()
                        .addComponent(btnPay)
                        .addGap(378, 378, 378))
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 917, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        CardPayCheckoutLayout.setVerticalGroup(
            CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CardPayCheckoutLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(CardPayCheckoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Sdt_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch_SDT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPay)
                .addGap(55, 55, 55))
        );

        CardLayout_Management.add(CardPayCheckout, "card7");

        Rooms.setBackground(new java.awt.Color(255, 255, 255));

        tblRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Room ID", "Type", "Describe", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRooms);
        tblRooms.getColumnModel().getColumn(0).setPreferredWidth(120);
        tblRooms.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblRooms.getColumnModel().getColumn(2).setPreferredWidth(300);
        tblRooms.getColumnModel().getColumn(3).setPreferredWidth(100);
        tblRooms.getColumnModel().getColumn(4).setPreferredWidth(130);
        jScrollPane1.getVerticalScrollBar().setPreferredSize(new java.awt.Dimension(5, 5));

        LbRoomManage.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        LbRoomManage.setText("Room Management");

        roomBtnPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnAddRoom.setText("Add");
        btnAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoomActionPerformed(evt);
            }
        });

        btnDeleteRoom.setText("Delete");
        btnDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoomActionPerformed(evt);
            }
        });

        btnUpdateRoom.setText("Update");
        btnUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roomBtnPanelLayout = new javax.swing.GroupLayout(roomBtnPanel);
        roomBtnPanel.setLayout(roomBtnPanelLayout);
        roomBtnPanelLayout.setHorizontalGroup(
            roomBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomBtnPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165))
        );
        roomBtnPanelLayout.setVerticalGroup(
            roomBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnDeleteRoom)
                    .addComponent(btnUpdateRoom)
                    .addComponent(btnAddRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout RoomsLayout = new javax.swing.GroupLayout(Rooms);
        Rooms.setLayout(RoomsLayout);
        RoomsLayout.setHorizontalGroup(
            RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomsLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                        .addComponent(jSeparator6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LbRoomManage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(301, 301, 301))
        );
        RoomsLayout.setVerticalGroup(
            RoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(LbRoomManage)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(roomBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 95, Short.MAX_VALUE))
        );

        CardLayout_Management.add(Rooms, "card2");

        Services.setBackground(new java.awt.Color(255, 255, 255));

        tblServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Service ID", "Type", "Describe", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblServices);
        tblServices.getColumnModel().getColumn(0).setPreferredWidth(120);
        tblServices.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblServices.getColumnModel().getColumn(2).setPreferredWidth(300);
        tblServices.getColumnModel().getColumn(3).setPreferredWidth(100);
        tblServices.getColumnModel().getColumn(4).setPreferredWidth(130);

        LbRoomManage1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        LbRoomManage1.setText("Service Management");

        serviceBtnPanel.setBackground(new java.awt.Color(255, 255, 255));
        serviceBtnPanel.setPreferredSize(new java.awt.Dimension(484, 68));

        btnAddService.setText("Add");
        btnAddService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServiceActionPerformed(evt);
            }
        });

        btnDeleteService.setText("Delete");
        btnDeleteService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteServiceActionPerformed(evt);
            }
        });

        btnUpdateService.setText("Update");
        btnUpdateService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateServiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout serviceBtnPanelLayout = new javax.swing.GroupLayout(serviceBtnPanel);
        serviceBtnPanel.setLayout(serviceBtnPanelLayout);
        serviceBtnPanelLayout.setHorizontalGroup(
            serviceBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serviceBtnPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddService, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteService, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdateService, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        serviceBtnPanelLayout.setVerticalGroup(
            serviceBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serviceBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serviceBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnAddService)
                    .addComponent(btnDeleteService)
                    .addComponent(btnUpdateService))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ServicesLayout = new javax.swing.GroupLayout(Services);
        Services.setLayout(ServicesLayout);
        ServicesLayout.setHorizontalGroup(
            ServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServicesLayout.createSequentialGroup()
                .addGroup(ServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ServicesLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
            .addGroup(ServicesLayout.createSequentialGroup()
                .addGroup(ServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ServicesLayout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(LbRoomManage1))
                    .addGroup(ServicesLayout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(serviceBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 296, Short.MAX_VALUE))
        );
        ServicesLayout.setVerticalGroup(
            ServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServicesLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(LbRoomManage1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(serviceBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        CardLayout_Management.add(Services, "card3");

        Invoices.setBackground(new java.awt.Color(255, 255, 255));

        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Invoice ID", "Customer ID", "Room ID", "Service ID", "Staff ID", "Day Created", "Day Started", "Day Ended", "Day Paid", "Total", "Payment Status", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblInvoices);
        tblInvoices.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblInvoices.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblInvoices.getColumnModel().getColumn(1).setPreferredWidth(80);
        tblInvoices.getColumnModel().getColumn(2).setPreferredWidth(80);
        tblInvoices.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblInvoices.getColumnModel().getColumn(4).setPreferredWidth(80);
        tblInvoices.getColumnModel().getColumn(5).setPreferredWidth(80);
        tblInvoices.getColumnModel().getColumn(6).setPreferredWidth(150);
        tblInvoices.getColumnModel().getColumn(7).setPreferredWidth(150);
        tblInvoices.getColumnModel().getColumn(8).setPreferredWidth(150);
        tblInvoices.getColumnModel().getColumn(9).setPreferredWidth(150);
        tblInvoices.getColumnModel().getColumn(10).setPreferredWidth(120);
        tblInvoices.getColumnModel().getColumn(11).setPreferredWidth(120);
        //tblInvoices.getColumnModel().getColumn(12).setPreferredWidth(120);
        jScrollPane3.getHorizontalScrollBar().setPreferredSize(new java.awt.Dimension(5, 5));

        LbRoomManage2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        LbRoomManage2.setText("Invoice Management");

        invoiceBtnPanel.setBackground(new java.awt.Color(255, 255, 255));
        invoiceBtnPanel.setForeground(new java.awt.Color(60, 63, 65));
        invoiceBtnPanel.setPreferredSize(new java.awt.Dimension(484, 68));

        btnAddInvoice.setText("Book");
        btnAddInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvoiceActionPerformed(evt);
            }
        });

        btnDeleteInvoice.setText("Delete");
        btnDeleteInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteInvoiceActionPerformed(evt);
            }
        });

        btnUpdateInvoice.setText("Update");
        btnUpdateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateInvoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invoiceBtnPanelLayout = new javax.swing.GroupLayout(invoiceBtnPanel);
        invoiceBtnPanel.setLayout(invoiceBtnPanelLayout);
        invoiceBtnPanelLayout.setHorizontalGroup(
            invoiceBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoiceBtnPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        invoiceBtnPanelLayout.setVerticalGroup(
            invoiceBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoiceBtnPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(invoiceBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnAddInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdateInvoice))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout InvoicesLayout = new javax.swing.GroupLayout(Invoices);
        Invoices.setLayout(InvoicesLayout);
        InvoicesLayout.setHorizontalGroup(
            InvoicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InvoicesLayout.createSequentialGroup()
                .addGroup(InvoicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InvoicesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(InvoicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator4)))
                    .addGroup(InvoicesLayout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(LbRoomManage2)
                        .addGap(0, 294, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(InvoicesLayout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(invoiceBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InvoicesLayout.setVerticalGroup(
            InvoicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InvoicesLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(LbRoomManage2)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invoiceBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jScrollPane4.getHorizontalScrollBar().setPreferredSize(new java.awt.Dimension(0, 5)); // 5 là chiều cao mới

        CardLayout_Management.add(Invoices, "card4");

        Customers.setBackground(new java.awt.Color(255, 255, 255));
        Customers.setForeground(new java.awt.Color(255, 51, 51));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setText("Customer Management");

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer ID", "Name", "Password", "Citizen ID", "Phone number", "Date of Birth", "Sex", "Address", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblCustomers);
        tblCustomers.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblCustomers.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblCustomers.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblCustomers.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblCustomers.getColumnModel().getColumn(3).setPreferredWidth(120);
        tblCustomers.getColumnModel().getColumn(4).setPreferredWidth(120);
        tblCustomers.getColumnModel().getColumn(5).setPreferredWidth(120);
        tblCustomers.getColumnModel().getColumn(6).setPreferredWidth(50);
        tblCustomers.getColumnModel().getColumn(7).setPreferredWidth(150);
        tblCustomers.getColumnModel().getColumn(8).setPreferredWidth(120);
        jScrollPane3.getHorizontalScrollBar().setPreferredSize(new java.awt.Dimension(5, 5));

        btnSearchCustomer.setText("Search");
        btnSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setText("Phone Number:");

        sdt_txt_search.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout CustomersLayout = new javax.swing.GroupLayout(Customers);
        Customers.setLayout(CustomersLayout);
        CustomersLayout.setHorizontalGroup(
            CustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator7)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
                    .addGroup(CustomersLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sdt_txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomersLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CustomersLayout.setVerticalGroup(
            CustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomersLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(27, 27, 27)
                .addGroup(CustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchCustomer)
                    .addComponent(jLabel8)
                    .addComponent(sdt_txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        CardLayout_Management.add(Customers, "card5");

        jSplitPane1.setRightComponent(CardLayout_Management);
        CardLayout_Management.setLayout(new CardLayout());

        // Thêm các panel vào CardLayout với tên (key)
        CardLayout_Management.add(Rooms, "Rooms");
        CardLayout_Management.add(Services, "Services");
        CardLayout_Management.add(Invoices, "Invoices");
        CardLayout_Management.add(Customers, "Customers");
        CardLayout_Management.add(CardPayCheckout, "Pay & Checkout");

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1142, Short.MAX_VALUE)
            .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, 665, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRoomManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoomManagementActionPerformed
        // TODO add your handling code here:
        autoReloadRoom();
        CardLayout cl = (CardLayout)(CardLayout_Management.getLayout());
        cl.show(CardLayout_Management, "Rooms");
//        autoReloadRoom();
    }//GEN-LAST:event_btnRoomManagementActionPerformed

    private void btnServiceManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServiceManagementActionPerformed
        // TODO add your handling code here:
        autoReloadService();
        CardLayout cl = (CardLayout)(CardLayout_Management.getLayout());
        cl.show(CardLayout_Management, "Services");
    }//GEN-LAST:event_btnServiceManagementActionPerformed

    private void btnInvoiceManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvoiceManagementActionPerformed
        // TODO add your handling code here:
        autoReloadInvoice();
        CardLayout cl = (CardLayout)(CardLayout_Management.getLayout());
        cl.show(CardLayout_Management, "Invoices");
        
    }//GEN-LAST:event_btnInvoiceManagementActionPerformed


    
    public void autoReloadRoom(){
        rooms.clear(); // Xoá dữ liệu cũ trong danh sách
        String sql = "SELECT * FROM DVPHONG ORDER BY MADVP ASC";
        dba_connection connect = new dba_connection();
        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                Room room = new Room();
                //room.roomID = rs.getString("MADVP");
                room.setRoomID(rs.getString("MADVP"));
                //room.loaiPhong = rs.getString("LOAIPHONG");
                room.setLoaiPhong(rs.getString("LOAIPHONG"));
//                System.out.println(room.getLoaiPhong());
                //room.moTa = rs.getString("MOTA");
                room.setMoTa(rs.getString("MOTA"));
                //room.donGia = rs.getInt("DONGIA");
                room.setDonGia(rs.getInt("DONGIA"));
                //room.tinhTrang = rs.getString("TINHTRANG");
                room.setTinhTrang(rs.getString("TINHTRANG"));
                rooms.add(room);
            }
//            System.out.println(rooms.size());                        
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Cannot load ROOM data: " + ex.getMessage());
        }

        // Hiển thị lại dữ liệu lên JTable
        model = (DefaultTableModel) tblRooms.getModel();
        model.setRowCount(0); // Xoá hết dữ liệu cũ trên bảng

        for (Room r : rooms) {
            model.addRow(new Object[] {
                r.getRoomID(),
                r.getLoaiPhong(),
                r.getMoTa(),
                r.getDonGia(),
                r.getTinhTrang()
            });
        }
    }
    private void btnUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRoomActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRooms.getSelectedRow();
        if (selectedRow == -1) 
        {
            JOptionPane.showMessageDialog(this, "Please choose a row to update!", "Notification", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            String roomID = tblRooms.getValueAt(selectedRow, 0).toString();
            UpdateRoomForm updateRoomForm = new UpdateRoomForm(this, roomID);
            updateRoomForm.setVisible(true);
        }

    }//GEN-LAST:event_btnUpdateRoomActionPerformed

    private void btnDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoomActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRooms.getSelectedRow(); // lấy dòng được chọn
 
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a row to delete!", "Notification", JOptionPane.WARNING_MESSAGE);
            return;
        }
 
        // Xác nhận xóa
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete this room", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
 
        // Xoá dòng khỏi bảng
        String roomID = tblRooms.getValueAt(selectedRow, 0).toString();
        try {
            dba_connection connect = new dba_connection();
            Class.forName(connect.driver);
            try (Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password)) {
                String sql = "DELETE FROM DVPHONG WHERE MADVP = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, roomID);
                
                int rowsDeleted = pst.executeUpdate();
                
                if (rowsDeleted > 0) {
                    // Xóa khỏi bảng hiển thị nếu xóa thành công trong DB
                    model = (DefaultTableModel) tblRooms.getModel();
                    model.removeRow(selectedRow);
                    
                    JOptionPane.showMessageDialog(this, "Room deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete room from database.");
                }
                
                pst.close();
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error deleting room: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteRoomActionPerformed

    private void btnAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoomActionPerformed
        // TODO add your handling code here:
        AddRoomForm addRoomForm = new AddRoomForm(this);
        addRoomForm.setVisible(true);
        
    }//GEN-LAST:event_btnAddRoomActionPerformed

    private void btnAddServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddServiceActionPerformed
        // TODO add your handling code here:
        AddServiceForm addServiceForm = new AddServiceForm(this);
        addServiceForm.setVisible(true);
    }//GEN-LAST:event_btnAddServiceActionPerformed

    private void btnUpdateServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateServiceActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblServices.getSelectedRow();
        if (selectedRow == -1) 
        {
            JOptionPane.showMessageDialog(this, "Please choose a row to update!", "Notification", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            String serviceID = tblServices.getValueAt(selectedRow, 0).toString();
            UpdateServiceForm updateServiceForm = new UpdateServiceForm(this, serviceID);
            updateServiceForm.setVisible(true);
        }

    }//GEN-LAST:event_btnUpdateServiceActionPerformed
    
    public void autoReloadService(){
        services.clear(); // Xoá dữ liệu cũ trong danh sách
        
        String sql = "SELECT * FROM DVTIENICH";
        dba_connection connect = new dba_connection();
       
        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                Service service = new Service();
                service.setMaDV(rs.getString("MADVTI"));
                service.setTenDV(rs.getString("TENDVTI"));               
                service.setMoTa(rs.getString("MOTA"));               
                service.setDonGia(rs.getInt("DONGIA"));
                service.setTinhTrang(rs.getString("TINHTRANG"));  
                services.add(service);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Cannot load Service data: " + ex.getMessage());
        }

        // Hiển thị lại dữ liệu lên JTable
        model = (DefaultTableModel) tblServices.getModel();
        model.setRowCount(0); // Xoá hết dữ liệu cũ trên bảng

        for (Service se : services) {
            model.addRow(new Object[] {
                se.getMaDV(),
                se.getTenDV(),
                se.getMoTa(),
                se.getDonGia(),
                se.getTinhTrang()
            });
        }
    }
    
    private void btnAddInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInvoiceActionPerformed
        // TODO add your handling code here:
        AddInvoiceForm addInvoiceForm = new AddInvoiceForm(this);
        addInvoiceForm.setVisible(true);
    }//GEN-LAST:event_btnAddInvoiceActionPerformed

    private void btnDeleteInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteInvoiceActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblInvoices.getSelectedRow(); // lấy dòng được chọn
 
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a row to delete!", "Notification", JOptionPane.WARNING_MESSAGE);
            return;
        }
 
        // Xác nhận xóa
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete this invoice", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
 
        
        String invoiceID = tblInvoices.getValueAt(selectedRow, 0).toString();
        try {
            dba_connection connect = new dba_connection();
            Class.forName(connect.driver);
            try (Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password)) {
                String sql = "DELETE FROM HOADON WHERE MAHD = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, invoiceID);
                
                int rowsDeleted = pst.executeUpdate();
                
                if (rowsDeleted > 0) {
                    // Xóa khỏi bảng hiển thị nếu xóa thành công trong DB
                    model = (DefaultTableModel) tblInvoices.getModel();
                    model.removeRow(selectedRow);
                    
                    JOptionPane.showMessageDialog(this, "Invoice deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete invoice from database.");
                }
                
                pst.close();
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error deleting room: " + ex.getMessage());
        }

    }//GEN-LAST:event_btnDeleteInvoiceActionPerformed

    private void btnUpdateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateInvoiceActionPerformed
        // TODO add your handling code here:int selectedRow = tblRooms.getSelectedRow();
        int selectedRow = tblInvoices.getSelectedRow();
        if (selectedRow == -1) 
        {
            JOptionPane.showMessageDialog(this, "Please choose a row to update!", "Notification", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            String invoiceID = tblInvoices.getValueAt(selectedRow, 0).toString();
            UpdateInvoiceForm updateInvoiceForm = new UpdateInvoiceForm(this, invoiceID);
            updateInvoiceForm.setVisible(true);
        }

    }//GEN-LAST:event_btnUpdateInvoiceActionPerformed

    public void autoReloadInvoice(){
        invoices.clear(); // Xoá dữ liệu cũ trong danh sách     
        String sql = "SELECT * FROM HOADON ORDER BY MAHD ASC";
        dba_connection connect = new dba_connection();
       
        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                Invoice invoice = new Invoice();
                invoice.setMaHD(rs.getString("MAHD"));
                invoice.setMaKH(rs.getString("MAKH"));               
                invoice.setMaDVP(rs.getString("MADVP"));
                invoice.setMaDVTI(rs.getString("MADVTI"));                
                invoice.setMaNV(rs.getString("NGUOIXACNHAN"));
                invoice.setNgayTao(rs.getString("NGAYTAO"));
                invoice.setNgayBD(rs.getString("NGAYBD"));
                invoice.setNgayKT(rs.getString("NGAYKT"));
                invoice.setNgayThanhToan(rs.getString("NGAYTHANHTOAN"));
                invoice.setTongTien(rs.getInt("TONGTIEN"));
                invoice.setTinhTrangTT(rs.getString("TINHTRANGTT"));
                invoice.setSLSD(rs.getInt("SLSD"));
                invoices.add(invoice);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Cannot load INVOICE data " + ex.getMessage());
        }

        // Hiển thị lại dữ liệu lên JTable
        model = (DefaultTableModel) tblInvoices.getModel();
        model.setRowCount(0); // Xoá hết dữ liệu cũ trên bảng

        for (Invoice in : invoices) {
            model.addRow(new Object[] {
                in.getMaHD(),
                in.getMaKH(),
                in.getMaDVP(),
                in.getMaDVTI(),            
                in.getMaNV(),
                in.getNgayTao(),
                in.getNgayBD(),
                in.getNgayKT(),
                in.getNgayThanhToan(),
                in.getTongTien(),
                in.getTinhTrangTT(),
                in.getSLSD()
            });
        }
        
        tblInvoices.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Ví dụ: nếu cột "Service ID" là TIxxx thì tô màu vàng
                Object cellValue = table.getValueAt(row, 10);
                String status = (cellValue != null) ? cellValue.toString() : "";
                if (status.equals("Vô hiệu hoá")) {
                    c.setBackground(new Color(255, 205, 224));
                } else {
                    c.setBackground(Color.WHITE); // reset màu nếu không thỏa điều kiện
                }

                if (isSelected) {
                    c.setBackground(Color.LIGHT_GRAY); // ưu tiên màu khi selected
                }

                return c;
            }            
        });
    }
    
    private void btnCustomerManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerManagementActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(CardLayout_Management.getLayout());
        cl.show(CardLayout_Management, "Customers");
    }//GEN-LAST:event_btnCustomerManagementActionPerformed
    
    
    private void btnPayCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayCheckoutActionPerformed
        CardLayout cl = (CardLayout)(CardLayout_Management.getLayout());
        cl.show(CardLayout_Management, "Pay & Checkout");
        
    }//GEN-LAST:event_btnPayCheckoutActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        
        if (Sdt_txt.getText() == null || Sdt_txt.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "You need phone number to check out", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        btnSearch_SDTActionPerformed(evt);
        if (flag_checkout == 1) return;
        int yes = JOptionPane.showConfirmDialog(this, "Are you sure to Pay & Checkout?", "exit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(yes == JOptionPane.YES_OPTION){
            Current_User.phonenumber = Sdt_txt.getText(); 
            new Service_pay_menu().setVisible(true);
        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerActionPerformed
        
        dba_connection connect = new dba_connection();
//        String sql_search_khachhang = "SELECT * FROM KHACHHANG WHERE SDT = '" + sdt_txt_search.getText() + "'";
        String sql_search_khachhang = "SELECT * FROM KHACHHANG WHERE trim(SDT) = trim(?)";
        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            PreparedStatement pst = null;
            pst = con.prepareStatement(sql_search_khachhang);
            model =  (DefaultTableModel) tblCustomers.getModel();
            model.setRowCount(0);            
            
            pst.setString(1, sdt_txt_search.getText());
            ResultSet rs = pst.executeQuery();
            

            while(rs.next()){
//                System.out.println("Tìm thấy: " + rs.getString("HOTEN"));
                Customer customer = new Customer();
                customer.setCustomerID(rs.getString("MAKH"));
                customer.setName(rs.getString("HOTEN"));
                customer.setPassword(rs.getString("PASSWORD"));
                customer.setCitizenID(rs.getString("CCCD"));
                customer.setPhoneNumber(rs.getString("SDT"));
                customer.setDateOfBirth(rs.getDate("NGAYSINH")); // Use getDate for DATE type
                customer.setGender(rs.getString("GIOITINH"));
                customer.setAddress(rs.getString("DIACHI"));
                customer.setEmail(rs.getString("EMAIL"));
                
                model.addRow(new Object[] {
                    customer.getCustomerID(),
                    customer.getName(),
                    customer.getPassword(),
                    customer.getCitizenID(),
                    customer.getPhoneNumber(),
                    customer.getDateOfBirth(),
                    customer.getGender(),
                    customer.getAddress(),
                    customer.getEmail()
                });                
            }
            
                       
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(DashboardClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchCustomerActionPerformed

    private void btnSearch_SDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch_SDTActionPerformed

        dba_connection connect = new dba_connection();

        String sql_hoadon = "select hd.MAHD, p.LOAIPHONG, ti.TENDVTI, p.MOTA, hd.NGAYBD, hd.NGAYKT, hd.TINHTRANGTT FROM HOADON hd "
        + "JOIN KHACHHANG kh ON hd.MAKH = kh.MAKH "
        + "FULL OUTER JOIN DVPHONG p ON hd.MADVP = p.MADVP "
        + "FULL OUTER JOIN DVTIENICH ti ON hd.MADVTI = ti.MADVTI "
        + "WHERE kh.SDT = '" + Sdt_txt.getText() + "' AND hd.TINHTRANGTT IN ('Chưa thanh toán', 'Đã thanh toán')";

        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            PreparedStatement pst = null;
            pst = con.prepareStatement(sql_hoadon);

            ResultSet rs2 = pst.executeQuery();
            list_Payout.clear();

            while(rs2.next()){
                Payout pay = new Payout();
                pay.setMahd(rs2.getString("MAHD"));
                pay.setLoaiphong(rs2.getString("LOAIPHONG"));
                pay.setMota(rs2.getString("MOTA"));
                pay.setTendvti(rs2.getString("TENDVTI"));
                pay.setNgaybd(rs2.getString("NGAYBD"));
                pay.setNgaykt(rs2.getString("NGAYKT"));
                pay.setTinhtrang(rs2.getString("TINHTRANGTT"));
                list_Payout.add(pay);
            }

            if(list_Payout.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "No invoice found for this phone number!");
                DefaultTableModel model = (DefaultTableModel) pay_table.getModel();
                model.setRowCount(0);
                flag_checkout = 1;
            }
            else
            {
                flag_checkout = 0;
                DefaultTableModel model = (DefaultTableModel) pay_table.getModel();
                model.setRowCount(0);

                for(Payout p: list_Payout){
                    model.addRow(new Object[]{
                        p.mahd,
                        p.loaiphong,
                        p.mota,
                        p.tendvti,
                        p.ngaybatdau,
                        p.ngayketthuc,
                        p.tinhtrangtt,
                    });
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(DashboardClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearch_SDTActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
        new Main_Menu().setVisible(true);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDeleteServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteServiceActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblServices.getSelectedRow(); // lấy dòng được chọn

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please choose a row to delete!", "Notification", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Xác nhận xóa
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete this service", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        String serviceID = tblServices.getValueAt(selectedRow, 0).toString();
        // Xoá dòng khỏi bảng
        try {
            dba_connection connect = new dba_connection();
            Class.forName(connect.driver);
            try (Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password)) {
                String sql = "DELETE FROM DVTIENICH WHERE MADVTI = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, serviceID);

                int rowsDeleted = pst.executeUpdate();

                if (rowsDeleted > 0) {
                    // Xóa khỏi bảng hiển thị nếu xóa thành công trong DB
                    model = (DefaultTableModel) tblServices.getModel();
                    model.removeRow(selectedRow);

                    JOptionPane.showMessageDialog(this, "Service deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete service from database.");
                }

                pst.close();
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error deleting room: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteServiceActionPerformed

    private void autoReloadCustomer(){
        Customer c = new Customer();
        String sql = "SELECT * FROM KHACHHANG";
        dba_connection connect = new dba_connection();
       
        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while(rs.next()){
                Customer customer = new Customer();
                customer.setCustomerID(rs.getString("MAKH"));
                customer.setName(rs.getString("HOTEN"));
                customer.setPassword(rs.getString("PASSWORD"));
                customer.setCitizenID(rs.getString("CCCD"));
                customer.setPhoneNumber(rs.getString("SDT"));
                customer.setDateOfBirth(rs.getDate("NGAYSINH")); // Use getDate for DATE type
                customer.setGender(rs.getString("GIOITINH"));
                customer.setAddress(rs.getString("DIACHI"));
                customer.setEmail(rs.getString("EMAIL"));
                customers.add(customer);
            }
        }
        catch (SQLException | ClassNotFoundException ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Cannot load Customer data " + ex.getMessage());
        }
        
        model = (DefaultTableModel) tblCustomers.getModel();
        model.setRowCount(0); // Xoá hết dữ liệu cũ trên bảng

        for (Customer cus : customers) {
            model.addRow(new Object[] {
                cus.getCustomerID(),
                cus.getName(),
                cus.getPassword(),
                cus.getCitizenID(),
                cus.getPhoneNumber(),
                cus.getDateOfBirth(),
                cus.getGender(),
                cus.getAddress(),
                cus.getEmail()
            });
        }
    /**
     * @param args the command line arguments
     */
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashboardStaff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CardLayout_Management;
    private javax.swing.JPanel CardPayCheckout;
    private javax.swing.JPanel Customers;
    private javax.swing.JPanel Invoices;
    private javax.swing.JLabel LbRoomManage;
    private javax.swing.JLabel LbRoomManage1;
    private javax.swing.JLabel LbRoomManage2;
    private javax.swing.JPanel Rooms;
    private javax.swing.JTextField Sdt_txt;
    private javax.swing.JPanel Services;
    private javax.swing.JButton btnAddInvoice;
    private javax.swing.JButton btnAddRoom;
    private javax.swing.JButton btnAddService;
    private javax.swing.JButton btnCustomerManagement;
    private javax.swing.JButton btnDeleteInvoice;
    private javax.swing.JButton btnDeleteRoom;
    private javax.swing.JButton btnDeleteService;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnInvoiceManagement;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnPayCheckout;
    private javax.swing.JButton btnRoomManagement;
    private javax.swing.JButton btnSearchCustomer;
    private javax.swing.JButton btnSearch_SDT;
    private javax.swing.JButton btnServiceManagement;
    private javax.swing.JButton btnUpdateInvoice;
    private javax.swing.JButton btnUpdateRoom;
    private javax.swing.JButton btnUpdateService;
    private javax.swing.JPanel invoiceBtnPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel panelBtn;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTable pay_table;
    private javax.swing.JPanel roomBtnPanel;
    private javax.swing.JTextField sdt_txt_search;
    private javax.swing.JPanel serviceBtnPanel;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTable tblRooms;
    private javax.swing.JTable tblServices;
    // End of variables declaration//GEN-END:variables
}
